package oracle1;

import javax.swing.JPanel;

import javax.swing.JButton;
import javax.swing.JLabel;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JTextField;
import javax.swing.JOptionPane;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;

import net.miginfocom.swing.MigLayout;

public class MemScreen extends JPanel 
{

	/**
	 * 
	 */
	private static final long serialVersionUID = -4522386710678340144L;
	private MemControl control = new MemControl();
	
	private JTextField idField = new JTextField();
	private JTextField fnameField = new JTextField(9);
	private JTextField lnameField = new JTextField(9);
	private JTextField streetField = new JTextField(9);
	private JTextField zipField = new JTextField();
	private JTextField stateField = new JTextField(2);
	private JTextField homeField = new JTextField(9);
	private JTextField cellField = new JTextField(9);
	private JTextField genField = new JTextField(1);
	private JTextField ageField = new JTextField(2);
	private JTextField birthField = new JTextField();
	private JTextField joinField = new JTextField();
	private JTextField feeField = new JTextField();
	private JTextField typeField = new JTextField(5);
	
	private JButton createButton = new JButton("New");
	private JButton createButton1 = new JButton("Delete");
	//private JButton createButton2 = new JButton("Update");
	private JButton createButton3 = new JButton("Next");
	private JButton createButton4 = new JButton("Previous");
	private JButton createButton5 = new JButton("Back");
	
	private JPanel panel;
	

	/**
	 * Create the panel.
	 */
	public MemScreen() 
	{ 
		setBorder(new TitledBorder (new EtchedBorder(),"Member Info"));
		setLayout(new BorderLayout(10, 10));
		add(iFields(), BorderLayout.PAGE_START);
		add(iButtons(), BorderLayout.AFTER_LAST_LINE);
		setFieldData(control.moveFirst());	
	}
	
	private JPanel iButtons()
	{
		JPanel panel = new JPanel();
		panel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		panel.add(createButton);
		createButton.addActionListener(new ButtonHandler());
		panel.add(createButton1);
		createButton1.addActionListener(new ButtonHandler());
		//panel.add(createButton2);
		//createButton2.addActionListener(new ButtonHandler());
		panel.add(createButton3);
		createButton3.addActionListener(new ButtonHandler());
		panel.add(createButton4);
		createButton4.addActionListener(new ButtonHandler());
		panel.add(createButton5);
		createButton5.addActionListener(new ButtonHandler());
		return panel;	
	}
	
	private JPanel iFields() 
	{
		JPanel panel = new JPanel();
		panel.setLayout(new MigLayout());
		panel.add(new JLabel("Member ID"), "left align label");
		panel.add(idField, "wrap");
		idField.setEnabled(false);
		panel.add(new JLabel("First Name"), "left align label");
		panel.add(fnameField);
		panel.add(new JLabel("Last Name"), "left align label");
		panel.add(lnameField,"wrap");
		panel.add(new JLabel("Street"), "left align label");
		panel.add(streetField);
		panel.add(new JLabel("Zip"), "left align label");
		panel.add(zipField);
		panel.add(new JLabel("State"), "left align label");
		panel.add(stateField, "wrap");
		panel.add(new JLabel("Home Phone"), "left align label");
		panel.add(homeField);
		panel.add(new JLabel("Cell Phone"), "left align label");
		panel.add(cellField, "wrap");
		panel.add(new JLabel("Gender"), "left align label");
		panel.add(genField);
		panel.add(new JLabel("Age"), "left align label");
		panel.add(ageField, "wrap");
		panel.add(new JLabel("Birth Date"), "left align label");
		panel.add(birthField);
		panel.add(new JLabel("Join Date"), "left align label");
		panel.add(joinField,"wrap");
		panel.add(new JLabel("Member Type"), "left align label");
		panel.add(typeField);
		panel.add(new JLabel("Member Fee"), "left align label");
		panel.add(feeField);
		return panel;
	}
	

	private Members getFieldData()
	{
		Members m = new Members();
		m.setID(idField.getText());
		m.setfname(fnameField.getText());
		m.setlname(lnameField.getText());
		m.setstreet(streetField.getText());
		m.setzip(zipField.getText());
		m.setstate(stateField.getText());
		m.sethome(homeField.getText());
		m.setcell(cellField.getText());
		m.setgen(genField.getText());
		m.setage(ageField.getText());
		m.setbirth(birthField.getText());
		m.setjoin(joinField.getText());
		m.setfee(feeField.getText());
		m.settype(typeField.getText());
		return m;	
	}
	
	private void setFieldData(Members m)
	{
		idField.setText(m.getmID());
		fnameField.setText(m.getfname());
		lnameField.setText(m.getlname());
		streetField.setText(m.getstreet());
		zipField.setText(m.getzip());
		stateField.setText(m.getstate());
		homeField.setText(m.gethome());
		cellField.setText(m.getcell());
		genField.setText(m.getgen());
		ageField.setText(m.getage());
		birthField.setText(m.getbirth());
		joinField.setText(m.getjoin());
		feeField.setText(m.getfee());
		typeField.setText(m.gettype());
	}
	
	private boolean isEmpty()
	{
		return
				(idField.getText().trim().isEmpty() &&
				 fnameField.getText().trim().isEmpty() &&
				 lnameField.getText().trim().isEmpty() &&
				 streetField.getText().trim().isEmpty() &&
				 zipField.getText().trim().isEmpty() &&
				 stateField.getText().trim().isEmpty() &&
				 homeField.getText().trim().isEmpty() &&
				 cellField.getText().trim().isEmpty() &&
				 genField.getText().trim().isEmpty() &&
				 ageField.getText().trim().isEmpty() &&
				 birthField.getText().trim().isEmpty() &&
				 joinField.getText().trim().isEmpty() &&
				 feeField.getText().trim().isEmpty() &&
				 typeField.getText().trim().isEmpty());
	}
	
	private class ButtonHandler implements ActionListener
	{
		@Override
		public void actionPerformed(ActionEvent e)
		{
			Members m = getFieldData();
			switch (e.getActionCommand())
			{
			case "Save":
				if (isEmpty())
				{
					JOptionPane.showMessageDialog(null, "Cannot add empty record");
					return;
				}
				if (control.create(m) != null)
				{
					JOptionPane.showMessageDialog(null, "Member ID: " + String.valueOf(m.getmID()) + " added");
					createButton.setText("New");
				}
				break;	
			case "New":
				idField.setEnabled(true);
				m.setID(idField.getText());
				m.setfname(fnameField.getText());
				m.setlname(lnameField.getText());
				m.setstreet(streetField.getText());
				m.setzip(zipField.getText());
				m.setstate(stateField.getText());
				m.sethome(homeField.getText());
				m.setcell(cellField.getText());
				m.setgen(genField.getText());
				m.setage(ageField.getText());
				m.setbirth(birthField.getText());
				m.setjoin(joinField.getText());
				m.setfee(feeField.getText());
				m.settype(typeField.getText());
				setFieldData(m);
				createButton.setText("Save");
				break;
			/*case "Update":
				if(isEmpty())
				{
					JOptionPane.showMessageDialog(null, "Empty record cannot be added.");
					return;
				}
				if(control.create(m) != null)
				{
					JOptionPane.showMessageDialog(null, "Member updated.");
				}
				break;*/
			case "Delete":
				if (isEmpty())
				{
					JOptionPane.showMessageDialog(null, "Cannot delete empty record.");
					return;
				}
				m = control.getCurrent();
				control.delete();
				JOptionPane.showMessageDialog(null, "Member ID: " + String.valueOf(m.getmID()) + " deleted");
				setFieldData(control.moveFirst());	
				break;
			case "Next":
				setFieldData(control.moveNext());
				break;
			case "Previous":
				setFieldData(control.movePrevious());
				break;
			case "Back":
				new MainScreen().setVisible(true);
				MemScreen.this.setVisible(false);
				break;
			}
		}
		
	}
}
